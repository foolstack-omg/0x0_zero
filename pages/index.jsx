"use client"
import { ConnectButton } from "@rainbow-me/rainbowkit"
import Head from "next/head"
import styles from "../styles/Home.module.css"
import { Button } from "@/components/ui/button"
import { ToastAction } from "@/components/ui/toast"
import { Toaster } from "@/components/ui/toaster"
import { useToast } from "@/components/ui/use-toast"
import {
  useChainId,
  useAccount,
  useContractRead,
  useContractWrite,
  usePrepareContractWrite,
  useWaitForTransaction,
  useSignMessage,
  useBalance,
  useNetwork, useSwitchNetwork,
  
} from 'wagmi';
import abiBaseNft from "@/abis/base-nft"
import React from 'react';

const CONTRACT_BASE_NFT = "0x1fc10ef15e041c5d3c54042e52eb0c54cb9b710c"
const contractConfig = {
  address: CONTRACT_BASE_NFT,
  abi: abiBaseNft,
};
const Home = () => {
  const { chain: currentChain } = useNetwork();
  const { chains, pendingChainId, switchNetwork } = useSwitchNetwork();
  const { toast } = useToast()
  const { isConnected, address } = useAccount();
  console.log(address)
  const [mounted, setMounted] = React.useState(false);
  const { data: balance, isError, isLoading } = useBalance({
    address: address,
    watch: true
  })
  // const balance = useBalance({
  //   address: address,
  //   formatUnits: 'ether',
  //   watch: true
  // });
  React.useEffect(() => setMounted(true), []);

  let chainId = useChainId()
  console.log(chainId)

  // console.log(contractWriteConfig)

  

  const { data: minted } = useContractRead({
    ...contractConfig,
    args: [address],
    functionName: 'balanceOf',
    watch: true,
  });

  console.log(minted)

  // React.useEffect(() => {
    
  //  console.log(totalSupplyData)
  // }, [totalSupplyData]);
  const {
    data: signature,
    signMessage,
    reset: resetSignature
  } = useSignMessage({
    onSuccess: (data, variables) => {
      
    },
  })

  
  const { config: contractWriteConfig } = usePrepareContractWrite({
    ...contractConfig,
    args: [signature],
    functionName: 'mint',
  });
  const {
    data: mintData,
    write: mint,
    isLoading: isMintLoading,
    isSuccess: isMintStarted,
    reset: resetWrite,
    error: mintError,
  } = useContractWrite(contractWriteConfig);

 
  
  const {
    data: txData,
    isSuccess: txSuccess,
    error: txError,
  } = useWaitForTransaction({
    hash: mintData?.hash,
  });

  let isTransfered = txSuccess;
  React.useEffect(() => {
    console.log(`transfered.'`, txData)
    if(isTransfered) {  
      toast({
        title: "Success",
        description: txData?.blockHash,
        action: (
          <ToastAction altText="Success">Ok</ToastAction>
        ),
      })
      resetWrite()
      resetSignature()
    }
  }, [isTransfered]);

  return (
    <div className={styles.container}>
      
      <Head>
        <title>0xLmaoevd</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
       
        <h1 className={styles.title}>
          Mint ‚ÄúBase is for builders‚Äù NFT. 
        </h1>

        <p className={styles.description}>
        <code className={styles.code}>{ balance?.formatted == 0 && currentChain?.id == 8453 && 'You can bridge ETH from Ethereum to Base by sending ETH to the following contract address:'}</code>
        </p>
        <p className={styles.description}>
        <code className={styles.code}>{ balance?.formatted == 0 && currentChain?.id == 8453 && '0x49048044D57e1C92A77f79988d21Fa8fAF74E97e'}</code>
        </p>

        {mounted && isConnected && currentChain?.id == 8453 && (
          <Button onClick={() => {
            if(signature) {
              mint()
            } else {
              signMessage({message: `all your base are belong to you.`})
            }
          }}>
             {!signature && 'Sign Message'}
             {signature && isMintLoading && 'Waiting for approval'}
             {signature && isMintStarted && 'Minting'}
             {signature && !isMintLoading && !isMintStarted && `Mint`}
          </Button>
        )}
        {currentChain?.id != 8453 && (
          <p className={styles.description} >
          <code className={styles.code}>Please switch to Base Network. </code>
          </p>
        )}

      <p className={styles.description} >
        <code className={styles.code}>Minted: {minted?.toString()}</code>
        </p>
      </main>

      <footer className={styles.footer}>
        <a href="https://twitter.com/0xLmaoevd" rel="noopener noreferrer" target="_blank">
          Made By ‚ù§Ô∏è  <b > 0xLmaoevd </b>  üåà
        </a>
      </footer>
      <Toaster />
    </div>
     
  )
}

export default Home
