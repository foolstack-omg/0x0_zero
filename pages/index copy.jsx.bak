"use client"
import { ConnectButton } from "@rainbow-me/rainbowkit"
import Head from "next/head"
import styles from "../styles/Home.module.css"
import { Button } from "@/components/ui/button"
import { ToastAction } from "@/components/ui/toast"
import { Toaster } from "@/components/ui/toaster"
import { useToast } from "@/components/ui/use-toast"
import {
  useAccount,
  useContractRead,
  useContractWrite,
  usePrepareContractWrite,
  useWaitForTransaction,
  useSignMessage,
} from 'wagmi';
import abiBaseNft from "@/abis/base-nft"
import React from 'react';

const CONTRACT_BASE_NFT = "0x1fc10ef15e041c5d3c54042e52eb0c54cb9b710c"
const ARB = "0x912CE59144191C1204E64559FE8253a0e49E6548"
const contractConfig = {
  address: ARB,
  abi: abiErc20,
};
const Home = () => {
  const { toast } = useToast()
  const { isConnected, address } = useAccount();
  const [mounted, setMounted] = React.useState(false);
  React.useEffect(() => setMounted(true), []);

  const { config: contractWriteConfig } = usePrepareContractWrite({
    ...contractConfig,
    args: [address, 1],
    functionName: 'transfer',
  });

  // console.log(contractWriteConfig)

  const {
    data: mintData,
    write: transfer,
    isLoading: isTransferLoading,
    isSuccess: isTransferStarted,
    error: transferError,
  } = useContractWrite(contractWriteConfig);

  const { data: totalSupplyData } = useContractRead({
    ...contractConfig,
    args: [address],
    functionName: 'balanceOf',
    watch: true,
  });

  React.useEffect(() => {
    
   console.log(totalSupplyData)
  }, [totalSupplyData]);

  const {
    data: txData,
    isSuccess: txSuccess,
    error: txError,
  } = useWaitForTransaction({
    hash: mintData?.hash,
  });


  let isTransfered = txSuccess;
  React.useEffect(() => {
    console.log(`transfered.'`, txData)
    if(isTransfered) {  
      toast({
        title: "Success",
        description: txData?.blockHash,
        action: (
          <ToastAction altText="Success">Ok</ToastAction>
        ),
      })
    }
   }, [isTransfered]);
  return (
    <div className={styles.container}>
      
      <Head>
        <title>0xLmaoevd</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
       
        <h1 className={styles.title}>
          Welcome to <a href="">RainbowKit</a> + <a href="">wagmi</a> +{" "}
          <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        {mounted && isConnected && (
          <Button onClick={() => transfer?.()}>
             {isTransferLoading && 'Waiting for approval'}
             {isTransferStarted && 'Transfering'}
             {!isTransferLoading && !isTransferStarted && `Transfer`}
          </Button>
        )}
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made By ‚ù§Ô∏è 0xLmaoevd üåà
        </a>
      </footer>
      <Toaster />
    </div>
     
  )
}

export default Home
